import Head from "next/head";
import { Button, Flex, Heading, useDisclosure, Text, useMediaQuery, Link as ChakraLink } from "@chakra-ui/react";
import { canSSRAuth } from "@/utils/canSSRAuth";
import { Sidebar } from "@/components/sidebar";
import Link from "next/link";
import { IoMdPerson } from "react-icons/io";
import { setupAPIClient } from "@/services/api";
import { useEffect, useState } from "react";
import { ModalInfo } from "@/components/modal";
import { toast } from "react-toastify";

export interface ScheduleItem {
    id: string;
    customer: string;
    haircut: {
        id: string;
        name: string;
        price: string | number;
        user_id: string;
    }
}

interface DashboardProps {
    schedule: ScheduleItem[];
}

export default function Dashboard({ schedule }: DashboardProps) {

    const { open, onOpen, onClose } = useDisclosure();

    const [list, setList] = useState(schedule);
    const [service, setService] = useState<ScheduleItem>();

    const [isMobile, setIsMobile] = useState(false);

    useEffect(() => {
        // Verifica se o código está sendo executado no cliente
        if (typeof window !== "undefined") {
            const mediaQuery = window.matchMedia("(max-width: 500px)");
            setIsMobile(mediaQuery.matches);

            // Adiciona um event listener para detectar mudanças na largura da tela
            const handleChange = () => setIsMobile(mediaQuery.matches);
            mediaQuery.addEventListener("change", handleChange);

            // Limpeza do event listener quando o componente for desmontado
            return () => {
                mediaQuery.removeEventListener("change", handleChange);
            };
        }
    }, []);


    function handleOpenModal(item: ScheduleItem) {
        //console.log(item);
        setService(item);
        onOpen();
    }

    async function handleFinish(id: string) {
        //console.log(id);

        try {
            const apiClient = setupAPIClient();
            await apiClient.delete("/schedule", {
                params: {
                    schedule_id: id,
                }
            });
            const filterItem = list.filter(item => {
                return (item?.id !== id);
            });
            setList(filterItem);
            onClose();

        } catch (err) {
            //console.log(err);
            onClose();
            toast.error("Erro ao finalizar serviço!");
        }
    }

    return (
        <>
            <Head>
                <title>Barber - Minha Barbearia</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Sidebar>
                <Flex direction="column" alignItems="flex-start" justifyContent="flex-start">
                    <Flex
                        direction={isMobile ? "column" : "row"}
                        w="100%"
                        alignItems={isMobile ? "flex-start" : "center"}
                        justifyContent="flex-start"
                        mb={0}>
                        <Heading
                            fontSize={isMobile ? "28px" : "2xl"}
                            mt={4}
                            mb={4}
                            mr={4}
                            color="orange.900"
                        >
                            Agenda
                        </Heading>

                        <Link href="/new">
                            <Button
                                bg="barber.900"
                                color="gray.100"
                                mb={isMobile ? 7 : 0}
                                _hover={{ bg: "barber.400" }}>
                                Registrar
                            </Button>
                        </Link>
                    </Flex>

                    {list.length === 0 && (
                        <Flex justify="center" alignItems="center" textAlign="center" w="100%" mt={10}>
                            <Text fontSize={19}>Nenhum agendamento até o momento!</Text>
                        </Flex>
                    )}

                    {list.map(item => (
                        <ChakraLink
                            onClick={() => handleOpenModal(item)}
                            key={item?.id}
                            w="100%"
                            m={0}
                            p={0}
                            mt={1}
                            bg="transparent"
                        >
                            <Flex
                                w="100%"
                                direction={isMobile ? "column" : "row"}
                                p={4}
                                bg="barber.400"
                                rounded={4}
                                mb={2}
                                justify="space-between"
                                align={isMobile ? "flex-start" : "center"}
                            >
                                <Flex direction={isMobile ? "column" : "row"} align="center" mx={isMobile ? "auto" : 0} justify="center" gap={2} mb={isMobile ? 2 : 0}>
                                    <IoMdPerson size={28} color="#fba931" />
                                    <Text lineClamp={2} color="#f1f1f1">{item?.customer}</Text>
                                </Flex>

                                <Text mx={isMobile ? "auto" : 0} color="#fba931">{item?.haircut?.name}</Text>
                                <Text mx={isMobile ? "auto" : 0} color="#f1f1f1">R$ {item?.haircut?.price}</Text>

                            </Flex>
                        </ChakraLink>
                    ))}

                </Flex>
            </Sidebar>


            <ModalInfo
                isOpen={open}
                onOpen={onOpen}
                onClose={onClose}
                data={service}
                finishService={async () => handleFinish(service?.id)}
            />

        </>
    )
}

export const getServerSideProps = canSSRAuth(async (ctx) => {

    try {
        const apiClient = setupAPIClient(ctx);
        const response = await apiClient.get("/schedule");

        //console.log(response.data);

        return {
            props: {
                schedule: response.data,
            }
        }

    } catch (err) {
        console.log(err);
        return {
            props: {
                schedule: [],
            }
        }
    }

})