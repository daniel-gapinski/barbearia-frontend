import Head from "next/head";
import { Flex, Text, Heading, Box, Input, Button } from "@chakra-ui/react";
import { Sidebar } from "@/components/sidebar";
import Link from "next/link";
import { canSSRAuth } from "@/utils/canSSRAuth";
import { useContext, useState } from "react";
import { AuthContext } from "@/contexts/AuthContext";
import { setupAPIClient } from "@/services/api";

interface UserProps {
    is: string;
    name: string;
    email: string;
    endereco: string | null;
}

interface ProfileProps {
    user: UserProps;
    premium: boolean;
}


export default function Profile({ user, premium }: ProfileProps) {

    const { logoutUser } = useContext(AuthContext);

    const [name, setName] = useState(user && user?.name);
    const [endereco, setEndereco] = useState(user?.endereco ? user?.endereco : "");

    async function handleLogout() {
        await logoutUser();
    }

    async function handleUpdateUser() {

        if(name === "") {
            return;
        }

        try {
            const apiClient = setupAPIClient();
            await apiClient.put("/users", {
                name: name,
                endereco: endereco,
            });
            alert("Dados alterados com sucessso!");
        }catch(err) {
            console.log(err);
        }

    }

    return (
        <>
            <Head>
                <title>Minha Conta - Barber</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Sidebar>
                <Flex direction="column" alignItems="flex-start" justifyContent="flex-start" w="100%">
                    <Flex w="100%" direction="row" alignItems="center" justifyContent="flex-start">
                        <Heading fontSize="3xl" color="orange.900" mb={4} mt={4} mr={4}>Minha conta</Heading>
                    </Flex>

                    <Flex pt={8} pb={8} bg="barber.400" maxW="1024px" mx="auto" w="100%" direction="column" alignItems="center" justifyContent="center">
                        <Flex direction="column" gap={2} w="85%" mb={5}>
                            <Text color="gray.100">Nome da barbearia:</Text>
                            <Input
                                w="100%"
                                bg="gray.900"
                                placeholder="Nome da barbearia"
                                borderColor="barber.700"
                                color="gray.100"
                                value={name}
                                onChange={ (e) => setName(e.target.value)}
                            />
                        </Flex>

                        <Flex direction="column" gap={2} w="85%" mb={5}>
                            <Text color="gray.100">Endereço:</Text>
                            <Input
                                w="100%"
                                bg="gray.900"
                                placeholder="Endereço"
                                borderColor="barber.700"
                                color="gray.100"
                                value={endereco}
                                onChange={ (e) => setEndereco(e.target.value)}
                            />
                        </Flex>

                        <Flex
                            color="gray.100"
                            direction="row"
                            gap={2} w="85%"
                            mb={5} bg="barber.900"
                            p={1}
                            borderColor="barber.400"
                            borderWidth={1}
                            rounded={6}
                            alignItems="center"
                            justifyContent="space-between">
                            <Text 
                                p={2} fontSize="13px" 
                                color={premium ? "orange.900" : "#4dffb4"}
                                >
                                    Plano {premium ? "Premium" : "Grátis"}
                            </Text>

                            <Link href="/planos">
                                <Box
                                    cursor="pointer"
                                    p={1} pl={2} pr={2}
                                    rounded={4}
                                    background="#00cd52"
                                    color='white'
                                >
                                    Mudar plano</Box>
                            </Link>
                        </Flex>

                        <Flex w="100%" pr={5} pl={5} mt={5} direction="column" gap={3}>
                            <Button onClick={handleUpdateUser} bg="button.cta" _hover={{ bg: "#ffb13e" }}>
                                Salvar
                            </Button>
                            <Button 
                                bg="transparent" 
                                borderWidth="1px" 
                                borderColor="red.500" 
                                color="red.500"
                                _hover={{ bg: "transparent" }}
                                onClick={handleLogout}
                            >
                                Sair da conta
                            </Button>
                        </Flex>

                    </Flex>

                </Flex>
            </Sidebar>

        </>
    )
}

export const getServerSideProps = canSSRAuth(async (ctx) => {

    try {
        const apiClient = setupAPIClient(ctx);
        const response = await apiClient.get("/me");

        //console.log(response.data);

        const user = {
            id: response.data.id,
            name: response.data.name, 
            email: response.data.email,
            endereco: response.data?.endereco,
        }

        return {
            props: {
                user: user,
                premium: response.data?.subscriptions?.status === "active" ? true : false
            }
        }
        
    }catch(err) {
        console.log(err);

        return{
            redirect: {
                destination: "/dashboard",
                permanent: false,
            }
        }
    }
});