import Head from "next/head";
import { Button, Flex, Heading, Input, useMediaQuery, createListCollection } from "@chakra-ui/react";
import { canSSRAuth } from "@/utils/canSSRAuth";
import { Sidebar } from "@/components/sidebar";
import { FiChevronLeft } from "react-icons/fi";
import Link from "next/link";
import { ChangeEvent, useState } from "react";
import { setupAPIClient } from "@/services/api";
import { useRouter } from "next/router";
import {
    SelectContent,
    SelectItem,
    SelectLabel,
    SelectRoot,
    SelectTrigger,
    SelectValueText,
} from "@/components/ui/select";

interface HaircutProps {
    id: string;
    name: string;
    price: string | number;
    status: boolean;
    user_id: string;
}

interface NewProps {
    haircuts: HaircutProps[]
}


export default function New({ haircuts }: NewProps) {

    const router = useRouter();

    const [isMobile] = useMediaQuery(["(max-width: 500px)"], {
        ssr: false,
      });

    const [customer, setCustomer] = useState("");
    const [haircutSelected, setHaircutSelected] = useState(haircuts[0]);

    function handleChangeSelect(id: string) {
        //console.log(id);
        const haircutItem = haircuts.find(item => item.id === id);
        //console.log(haircutItem);
        setHaircutSelected(haircutItem);
    }

    async function handleRegister() {
        if (customer === "") {
            alert("Preencha o nome do cliente!");
            return;
        }
        try {
            const apiClient = setupAPIClient();
            await apiClient.post("/schedule", {
                customer: customer,
                haircut_id: haircutSelected?.id,
            });
            router.push("/dashboard");

        } catch (err) {
            console.log(err);
            alert("Erro ao registrar!");
        }
    }

    const haircutItems = createListCollection({
        items: haircuts.map(haircut => ({
            label: haircut?.name,
            value: haircut?.id,
        }))
    })

    return (
        <>
            <Head>
                <title>Barber - Novo Agendamento</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Sidebar>
                <Flex direction='column' alignItems="flex-start" justifyContent="flex-start">
                    <Flex
                        direction={isMobile ? "column" : "row"}
                        w="100%"
                        align={isMobile ? "flex-start" : "center"}
                        mb={isMobile ? 4 : 0}
                    >
                        <Link href="/haircuts">
                            <Flex direction="row" alignItems="center" mr={4}>
                                <FiChevronLeft size={21} color="white" />
                                <Button bg="transparent" _hover={{ bg: "transparent" }} color="gray.100">Voltar</Button>
                            </Flex>
                        </Link>

                        <Heading
                            color="orange.900"
                            fontSize={isMobile ? "28px" : "2xl"}
                        >
                            Novo Servi√ßo
                        </Heading>
                    </Flex>

                    <Flex
                        maxW="1024px"
                        bg="barber.400"
                        w="100%"
                        mx="auto"
                        align="center"
                        justify="center"
                        direction="column"
                        mt={5}
                        pb={10}
                        pt={10}
                    >

                        <Flex w="100%" align="center" justify="center" mb={4}>
                            <Input
                                color="gray.100"
                                size="md"
                                placeholder="Insira o nome do cliente"
                                width="85%"
                                type="text"
                                bg="barber.900"
                                value={customer}
                                onChange={(e: ChangeEvent<HTMLInputElement>) => setCustomer(e.target.value)}
                            />
                        </Flex>

                        <Flex w="100%" align="center" justify="center" mb={4}>
                            <SelectRoot collection={haircutItems} w="85%" bg="barber.900"> 
                                <SelectTrigger>
                                    <SelectValueText placeholder="Selecione o corte desejado" />
                                </SelectTrigger>
                                <SelectContent bg="barber.900">
                                    {haircutItems.items.map((haircut) => (
                                        <SelectItem key={haircut.value} item={haircut} onClick={() => handleChangeSelect(haircut.value)}>
                                            {haircut.label}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </SelectRoot>
                        </Flex>

                        <Button
                            onClick={handleRegister}
                            w="85%"
                            bg="button.cta"
                            _hover={{ bg: "orange.900" }}
                            mb={5}
                        >   Registrar
                        </Button>
                    </Flex>

                </Flex>
            </Sidebar>

        </>
    )
}

export const getServerSideProps = canSSRAuth(async (ctx) => {

    try {

        const apiClient = setupAPIClient(ctx);
        const response = await apiClient.get("/haircuts", {
            params: {
                status: true,
            }
        });
        if (response.data === null) {
            return {
                redirect: {
                    destination: "/dashboard",
                    permanent: false,
                }
            }
        }

        //console.log(response.data);
        return {
            props: {
                haircuts: response.data,
            }
        }

    } catch (err) {
        console.log(err);

        return {
            redirect: {
                destination: "/dashboard",
                permanent: false,
            }
        }
    }

})